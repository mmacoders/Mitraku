<template>
  <Modal :show="show" @close="closeModal" max-width="2xl">
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl overflow-hidden">
      <!-- Modal header -->
      <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
        <div class="flex items-center justify-between">
          <div class="flex items-center">
            <span class="text-2xl mr-3 text-blue-600">üìÖ</span>
            <div>
              <h3 class="text-lg font-bold leading-6 text-gray-900 dark:text-white">
                Edit Rapat
              </h3>
              <p class="text-xs text-gray-500 dark:text-gray-400 mt-1">
                Update detail rapat
              </p>
            </div>
          </div>
          <button @click="closeModal" class="text-gray-400 hover:text-gray-500 dark:text-gray-300 dark:hover:text-gray-200">
            <span class="text-2xl">&times;</span>
          </button>
        </div>
      </div>

      <!-- Modal body -->
      <div class="px-6 py-4 max-h-[70vh] overflow-y-auto">
        <form @submit.prevent="submit" class="space-y-6">
          <!-- Judul Rapat -->
          <div>
            <InputLabel for="judul" value="Judul Rapat" />
            <TextInput
              id="judul"
              v-model="form.judul"
              type="text"
              class="mt-1 block w-full"
              required
              :disabled="form.processing"
            />
            <InputError class="mt-2" :message="form.errors.judul" />
          </div>

          <!-- Tanggal & Waktu -->
          <div>
            <InputLabel for="tanggal_waktu" value="Tanggal & Waktu" />
            <TextInput
              id="tanggal_waktu"
              v-model="form.tanggal_waktu"
              type="datetime-local"
              class="mt-1 block w-full"
              required
              :disabled="form.processing"
            />
            <InputError class="mt-2" :message="form.errors.tanggal_waktu" />
          </div>

          <!-- Lokasi/Link Meeting -->
          <div>
            <InputLabel for="lokasi" value="Link Meeting / Lokasi Meeting" />
            <TextInput
              id="lokasi"
              v-model="form.lokasi"
              type="text"
              class="mt-1 block w-full"
              required
              :disabled="form.processing"
              placeholder="Masukkan lokasi fisik atau link meeting"
            />
            <InputError class="mt-2" :message="form.errors.lokasi" />
          </div>

          <!-- Status -->
          <div>
            <InputLabel for="status" value="Status" />
            <select
              id="status"
              class="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-gray-300 focus:border-indigo-500 dark:focus:border-indigo-600 focus:ring-indigo-500 dark:focus:ring-indigo-600 shadow-sm"
              v-model="form.status"
              required
            >
              <option value="akan_datang">Akan Datang</option>
              <option value="selesai">Selesai</option>
              <option value="dibatalkan">Dibatalkan</option>
            </select>
            <InputError class="mt-2" :message="form.errors.status" />
          </div>

          <!-- Deskripsi Agenda Rapat -->
          <div>
            <InputLabel for="deskripsi" value="Deskripsi Agenda Rapat (Opsional)" />
            <textarea
              id="deskripsi"
              v-model="form.deskripsi"
              class="mt-1 block w-full rounded-md border-gray-300 dark:border-gray-700 dark:bg-gray-900 dark:text-gray-300 focus:border-indigo-500 dark:focus:border-indigo-600 focus:ring-indigo-500 dark:focus:ring-indigo-600 shadow-sm"
              rows="4"
              :disabled="form.processing"
              placeholder="Deskripsikan agenda rapat..."
            ></textarea>
            <InputError class="mt-2" :message="form.errors.deskripsi" />
          </div>

          <!-- Upload Dokumen PKS -->
          <div>
            <InputLabel for="pks_document" value="Upload Dokumen PKS (Opsional)" />
            <input
              id="pks_document"
              ref="fileInput"
              type="file"
              class="mt-1 block w-full text-sm text-gray-500 dark:text-gray-400
                file:mr-4 file:py-2 file:px-4
                file:rounded-md file:border-0
                file:text-sm file:font-semibold
                file:bg-indigo-50 file:text-indigo-700
                hover:file:bg-indigo-100
                dark:file:bg-indigo-900 dark:file:text-indigo-200
                dark:hover:file:bg-indigo-800"
              @change="handleFileChange"
              accept=".pdf,.doc,.docx"
            />
            
            <!-- File preview for existing document -->
            <div v-if="existingDocumentUrl" class="mt-2 flex items-center justify-between p-2 bg-gray-50 rounded-lg dark:bg-gray-700">
              <div class="flex items-center">
                <span class="text-lg mr-2">
                  {{ getFileIcon('pdf') }}
                </span>
                <div class="text-xs">
                  <p class="font-medium text-gray-900 dark:text-white truncate max-w-[120px]">
                    {{ getFileNameFromUrl(existingDocumentUrl) }}
                  </p>
                </div>
              </div>
              <div class="flex space-x-2">
                <a 
                  :href="existingDocumentUrl"
                  target="_blank"
                  class="text-blue-500 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"
                  title="Lihat dokumen"
                >
                  üëÅÔ∏è
                </a>
                <button 
                  type="button"
                  @click="removeExistingFile"
                  class="text-gray-500 hover:text-red-500 dark:text-gray-400 dark:hover:text-red-400"
                  title="Hapus file"
                >
                  ‚ùå
                </button>
              </div>
            </div>
            
            <!-- File preview for new document -->
            <div v-if="form.pks_document" class="mt-2 flex items-center justify-between p-2 bg-gray-50 rounded-lg dark:bg-gray-700">
              <div class="flex items-center">
                <span class="text-lg mr-2">
                  {{ getFileIcon(form.pks_document.type) }}
                </span>
                <div class="text-xs">
                  <p class="font-medium text-gray-900 dark:text-white truncate max-w-[120px]">
                    {{ form.pks_document.name }}
                  </p>
                  <p class="text-gray-500 dark:text-gray-400">
                    {{ formatFileSize(form.pks_document.size) }}
                  </p>
                </div>
              </div>
              <button 
                type="button"
                @click="removeNewFile"
                class="text-gray-500 hover:text-red-500 dark:text-gray-400 dark:hover:text-red-400"
                title="Hapus file"
              >
                ‚ùå
              </button>
            </div>
            
            <InputError class="mt-2" :message="form.errors.pks_document" />
            <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
              Format yang diterima: PDF, DOC, DOCX. Maksimal 2MB.
            </p>
          </div>

          <!-- Submit buttons -->
          <div class="flex items-center justify-end space-x-3 pt-4">
            <SecondaryButton @click="closeModal" :disabled="form.processing">
              Batal
            </SecondaryButton>
            <PrimaryButton 
              :class="{ 'opacity-25': form.processing }" 
              :disabled="form.processing"
            >
              <span v-if="form.processing">Memperbarui...</span>
              <span v-else>Update Rapat</span>
            </PrimaryButton>
          </div>
        </form>
      </div>
    </div>
  </Modal>
</template>

<script setup lang="ts">
import { ref, watch } from 'vue'
import { useForm } from '@inertiajs/vue3'
import Modal from '@/Components/Modal.vue'
import PrimaryButton from '@/Components/PrimaryButton.vue'
import SecondaryButton from '@/Components/SecondaryButton.vue'
import TextInput from '@/Components/TextInput.vue'
import InputLabel from '@/Components/InputLabel.vue'
import InputError from '@/Components/InputError.vue'

const props = defineProps<{
  show: boolean
  onClose: () => void
  rapat: {
    id: number
    judul: string
    tanggal_waktu: string
    lokasi: string
    deskripsi: string
    status: string
    pks_document_url?: string
  } | null
}>()

const emit = defineEmits(['updated'])

const fileInput = ref<HTMLInputElement | null>(null)
const existingDocumentUrl = ref<string | null>(null)

// Form setup
const form = useForm({
  judul: '',
  tanggal_waktu: '',
  lokasi: '',
  deskripsi: '',
  status: 'akan_datang',
  pks_document: null as File | null,
  shouldRemoveExistingDocument: false
})

// Format datetime for datetime-local input
const formatDateTimeForInput = (dateTimeString: string): string => {
  if (!dateTimeString) return ''
  try {
    // Create a Date object from the datetime string
    const date = new Date(dateTimeString)
    
    // Check if the date is valid
    if (isNaN(date.getTime())) return ''
    
    // Format as YYYY-MM-DDTHH:MM (required by datetime-local input)
    const year = date.getFullYear()
    const month = String(date.getMonth() + 1).padStart(2, '0')
    const day = String(date.getDate()).padStart(2, '0')
    const hours = String(date.getHours()).padStart(2, '0')
    const minutes = String(date.getMinutes()).padStart(2, '0')
    
    return `${year}-${month}-${day}T${hours}:${minutes}`
  } catch (error) {
    console.error('Error formatting datetime:', error)
    return ''
  }
}

// Watch for changes in the show prop to populate form when modal opens
watch(() => props.show, (newShow) => {
  if (newShow && props.rapat) {
    // Populate form fields when modal is opened and rapat data is available
    form.judul = props.rapat.judul || ''
    form.tanggal_waktu = formatDateTimeForInput(props.rapat.tanggal_waktu) || ''
    form.lokasi = props.rapat.lokasi || ''
    form.deskripsi = props.rapat.deskripsi || ''
    form.status = props.rapat.status || 'akan_datang'
    existingDocumentUrl.value = props.rapat.pks_document_url || null
  }
}, { immediate: true })

// Watch for changes in the rapat prop
watch(() => props.rapat, (newRapat) => {
  if (props.show && newRapat) {
    // Populate form fields when rapat data changes and modal is open
    form.judul = newRapat.judul || ''
    form.tanggal_waktu = formatDateTimeForInput(newRapat.tanggal_waktu) || ''
    form.lokasi = newRapat.lokasi || ''
    form.deskripsi = newRapat.deskripsi || ''
    form.status = newRapat.status || 'akan_datang'
    existingDocumentUrl.value = newRapat.pks_document_url || null
  }
}, { immediate: true })

// Handle file change
const handleFileChange = (e: Event) => {
  const target = e.target as HTMLInputElement
  if (target.files && target.files[0]) {
    const file = target.files[0]
    if (validateFile(file)) {
      form.pks_document = file
    }
  }
}

// Validate file
const validateFile = (file: File): boolean => {
  const validTypes = ['application/pdf', 'application/msword', 
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document']
  const maxSize = 2 * 1024 * 1024 // 2MB
  
  if (!validTypes.includes(file.type)) {
    alert('Format file tidak didukung. Harap unggah file PDF, DOC, atau DOCX.')
    return false
  }
  
  if (file.size > maxSize) {
    alert('Ukuran file terlalu besar. Maksimal 2MB.')
    return false
  }
  
  return true
}

// Remove existing file
const removeExistingFile = () => {
  existingDocumentUrl.value = null
  // Mark that the existing file should be removed
  form.shouldRemoveExistingDocument = true
}

// Remove new file
const removeNewFile = () => {
  form.pks_document = null
  if (fileInput.value) {
    fileInput.value.value = ''
  }
}

// Get file icon
const getFileIcon = (type: string) => {
  if (type.includes('pdf')) return 'üìÑ'
  if (type.includes('word') || type.includes('doc')) return 'üìù'
  return 'üìÅ'
}

// Format file size
const formatFileSize = (bytes: number) => {
  if (bytes === 0) return '0 Bytes'
  const k = 1024
  const sizes = ['Bytes', 'KB', 'MB', 'GB']
  const i = Math.floor(Math.log(bytes) / Math.log(k))
  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i]
}

// Get file name from URL
const getFileNameFromUrl = (url: string | null) => {
  if (!url) return 'dokumen_pks.pdf'
  try {
    const urlObj = new URL(url)
    const pathParts = urlObj.pathname.split('/')
    return pathParts[pathParts.length - 1] || 'dokumen_pks.pdf'
  } catch {
    return 'dokumen_pks.pdf'
  }
}

// Close modal
const closeModal = () => {
  props.onClose()
  form.reset()
  form.clearErrors()
  existingDocumentUrl.value = null
  if (fileInput.value) {
    fileInput.value.value = ''
  }
}

// Submit form
const submit = () => {
  if (props.rapat) {
    // Update existing rapat
    // We need to use forceFormData to properly handle file uploads
    form.put(route('rapat.update', props.rapat.id), {
      forceFormData: true,
      onSuccess: () => {
        closeModal()
        emit('updated')
      },
      onError: (errors) => {
        console.error('Validation errors:', errors)
      }
    })
  }
}
</script>